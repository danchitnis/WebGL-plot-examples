(function () {
    'use strict';

    var WorkerClass = null;

    try {
        var WorkerThreads =
            typeof module !== 'undefined' && typeof module.require === 'function' && module.require('worker_threads') ||
            typeof __non_webpack_require__ === 'function' && __non_webpack_require__('worker_threads') ||
            typeof require === 'function' && require('worker_threads');
        WorkerClass = WorkerThreads.Worker;
    } catch(e) {} // eslint-disable-line

    function decodeBase64(base64, enableUnicode) {
        return Buffer.from(base64, 'base64').toString(enableUnicode ? 'utf16' : 'utf8');
    }

    function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
        var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
        var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
        var source = decodeBase64(base64, enableUnicode);
        var start = source.indexOf('\n', 10) + 1;
        var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
        return function WorkerFactory(options) {
            return new WorkerClass(body, Object.assign({}, options, { eval: true }));
        };
    }

    function decodeBase64$1(base64, enableUnicode) {
        var binaryString = atob(base64);
        if (enableUnicode) {
            var binaryView = new Uint8Array(binaryString.length);
            for (var i = 0, n = binaryString.length; i < n; ++i) {
                binaryView[i] = binaryString.charCodeAt(i);
            }
            return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
        }
        return binaryString;
    }

    function createURL(base64, sourcemapArg, enableUnicodeArg) {
        var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
        var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
        var source = decodeBase64$1(base64, enableUnicode);
        var start = source.indexOf('\n', 10) + 1;
        var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
        var blob = new Blob([body], { type: 'application/javascript' });
        return URL.createObjectURL(blob);
    }

    function createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg) {
        var url;
        return function WorkerFactory(options) {
            url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
            return new Worker(url, options);
        };
    }

    var kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';

    function isNodeJS() {
        return kIsNodeJS;
    }

    function createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg) {
        if (isNodeJS()) {
            return createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg);
        }
        return createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg);
    }

    var WorkerFactory = createBase64WorkerFactory$2('', 'data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2ZmU2NyZWVuLXdvcmtlci5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3dlYmdsLXBsb3QvZGlzdC93ZWJnbHBsb3QuZXNtLmpzIiwic3JjL29mZlNjcmVlbi13b3JrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ29sb3JSR0JBIHtcclxuICAgIGNvbnN0cnVjdG9yKHIsIGcsIGIsIGEpIHtcclxuICAgICAgICB0aGlzLnIgPSByO1xyXG4gICAgICAgIHRoaXMuZyA9IGc7XHJcbiAgICAgICAgdGhpcy5iID0gYjtcclxuICAgICAgICB0aGlzLmEgPSBhO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBCYXNlbGluZSBjbGFzc1xyXG4gKi9cclxuY2xhc3MgV2ViZ2xCYXNlTGluZSB7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnNjYWxlWCA9IDE7XHJcbiAgICAgICAgdGhpcy5zY2FsZVkgPSAxO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IDA7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gMDtcclxuICAgICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl92YnVmZmVyID0gMDtcclxuICAgICAgICB0aGlzLl9wcm9nID0gMDtcclxuICAgICAgICB0aGlzLl9jb29yZCA9IDA7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmludGVuc2l0eSA9IDE7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIFRoZSBzdGFuZGFyZCBMaW5lIGNsYXNzXHJcbiAqL1xyXG5jbGFzcyBXZWJnbExpbmUgZXh0ZW5kcyBXZWJnbEJhc2VMaW5lIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IGxpbmVcclxuICAgICAqIEBwYXJhbSBjIC0gdGhlIGNvbG9yIG9mIHRoZSBsaW5lXHJcbiAgICAgKiBAcGFyYW0gbnVtUG9pbnRzIC0gbnVtYmVyIG9mIGRhdGEgcGludHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiB4PSBbMCwxXVxyXG4gICAgICogeT0gWzEsMl1cclxuICAgICAqIGxpbmUgPSBuZXcgV2ViZ2xMaW5lKCBuZXcgQ29sb3JSR0JBKDAuMSwwLjEsMC4xLDEpLCAyKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjLCBudW1Qb2ludHMpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMud2ViZ2xOdW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcbiAgICAgICAgdGhpcy5udW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGM7XHJcbiAgICAgICAgdGhpcy54eSA9IG5ldyBGbG9hdDMyQXJyYXkoMiAqIHRoaXMud2ViZ2xOdW1Qb2ludHMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIFggdmFsdWUgYXQgYSBzcGVjaWZpYyBpbmRleFxyXG4gICAgICogQHBhcmFtIGluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSBkYXRhIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geCAtIHRoZSBob3Jpem9udGFsIHZhbHVlIG9mIHRoZSBkYXRhIHBvaW50XHJcbiAgICAgKi9cclxuICAgIHNldFgoaW5kZXgsIHgpIHtcclxuICAgICAgICB0aGlzLnh5W2luZGV4ICogMl0gPSB4O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIFkgdmFsdWUgYXQgYSBzcGVjaWZpYyBpbmRleFxyXG4gICAgICogQHBhcmFtIGluZGV4IDogdGhlIGluZGV4IG9mIHRoZSBkYXRhIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSA6IHRoZSB2ZXJ0aWNhbCB2YWx1ZSBvZiB0aGUgZGF0YSBwb2ludFxyXG4gICAgICovXHJcbiAgICBzZXRZKGluZGV4LCB5KSB7XHJcbiAgICAgICAgdGhpcy54eVtpbmRleCAqIDIgKyAxXSA9IHk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbiBYIHZhbHVlIGF0IGEgc3BlY2lmaWMgaW5kZXhcclxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBpbmRleCBvZiBYXHJcbiAgICAgKi9cclxuICAgIGdldFgoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy54eVtpbmRleCAqIDJdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYW4gWSB2YWx1ZSBhdCBhIHNwZWNpZmljIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgWVxyXG4gICAgICovXHJcbiAgICBnZXRZKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueHlbaW5kZXggKiAyICsgMV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1ha2UgYW4gZXF1YWxseSBzcGFjZWQgYXJyYXkgb2YgWCBwb2ludHNcclxuICAgICAqIEBwYXJhbSBzdGFydCAgLSB0aGUgc3RhcnQgb2YgdGhlIHNlcmllc1xyXG4gICAgICogQHBhcmFtIHN0ZXBTaXplIC0gc3RlcCBzaXplIGJldHdlZW4gZWFjaCBkYXRhIHBvaW50XHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIC8veCA9IFstMSwgLTAuOCwgLTAuNiwgLTAuNCwgLTAuMiwgMCwgMC4yLCAwLjQsIDAuNiwgMC44XVxyXG4gICAgICogY29uc3QgbnVtWCA9IDEwO1xyXG4gICAgICogbGluZS5saW5lU3BhY2VYKC0xLCAyIC8gbnVtWCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbGluZVNwYWNlWChzdGFydCwgc3RlcFNpemUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtUG9pbnRzOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gc2V0IHggdG8gLW51bS8yOjE6K251bS8yXHJcbiAgICAgICAgICAgIHRoaXMuc2V0WChpLCBzdGFydCArIHN0ZXBTaXplICogaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgYSBjb25zdGFudCB2YWx1ZSBmb3IgYWxsIFkgdmFsdWVzIGluIHRoZSBsaW5lXHJcbiAgICAgKiBAcGFyYW0gYyAtIGNvbnN0YW50IHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0WShjKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm51bVBvaW50czsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB4IHRvIC1udW0vMjoxOitudW0vMlxyXG4gICAgICAgICAgICB0aGlzLnNldFkoaSwgYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBuZXcgWSB2YWx1ZXMgdG8gdGhlIGVuZCBvZiBjdXJyZW50IGFycmF5IGFuZCBzaGlmdCBpdCwgc28gdGhhdCB0aGUgdG90YWwgbnVtYmVyIG9mIHRoZSBwYWlyIHJlbWFpbnMgdGhlIHNhbWVcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gdGhlIFkgYXJyYXlcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogeUFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbMywgNCwgNV0pO1xyXG4gICAgICogbGluZS5zaGlmdEFkZCh5QXJyYXkpO1xyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHNoaWZ0QWRkKGRhdGEpIHtcclxuICAgICAgICBjb25zdCBzaGlmdFNpemUgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtUG9pbnRzIC0gc2hpZnRTaXplOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRZKGksIHRoaXMuZ2V0WShpICsgc2hpZnRTaXplKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpZnRTaXplOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRZKGkgKyB0aGlzLm51bVBvaW50cyAtIHNoaWZ0U2l6ZSwgZGF0YVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBUaGUgc3RlcCBiYXNlZCBsaW5lIHBsb3RcclxuICovXHJcbmNsYXNzIFdlYmdsU3RlcCBleHRlbmRzIFdlYmdsQmFzZUxpbmUge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgc3RlcCBsaW5lXHJcbiAgICAgKiBAcGFyYW0gYyAtIHRoZSBjb2xvciBvZiB0aGUgbGluZVxyXG4gICAgICogQHBhcmFtIG51bVBvaW50cyAtIG51bWJlciBvZiBkYXRhIHBpbnRzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogeD0gWzAsMV1cclxuICAgICAqIHk9IFsxLDJdXHJcbiAgICAgKiBsaW5lID0gbmV3IFdlYmdsU3RlcCggbmV3IENvbG9yUkdCQSgwLjEsMC4xLDAuMSwxKSwgMik7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYywgbnVtKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLndlYmdsTnVtUG9pbnRzID0gbnVtICogMjtcclxuICAgICAgICB0aGlzLm51bVBvaW50cyA9IG51bTtcclxuICAgICAgICB0aGlzLmNvbG9yID0gYztcclxuICAgICAgICB0aGlzLnh5ID0gbmV3IEZsb2F0MzJBcnJheSgyICogdGhpcy53ZWJnbE51bVBvaW50cyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgWSB2YWx1ZSBhdCBhIHNwZWNpZmljIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgdGhlIGRhdGEgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0gdGhlIHZlcnRpY2FsIHZhbHVlIG9mIHRoZSBkYXRhIHBvaW50XHJcbiAgICAgKi9cclxuICAgIHNldFkoaW5kZXgsIHkpIHtcclxuICAgICAgICB0aGlzLnh5W2luZGV4ICogNCArIDFdID0geTtcclxuICAgICAgICB0aGlzLnh5W2luZGV4ICogNCArIDNdID0geTtcclxuICAgIH1cclxuICAgIGdldFgoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy54eVtpbmRleCAqIDRdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYW4gWCB2YWx1ZSBhdCBhIHNwZWNpZmljIGluZGV4XHJcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgWFxyXG4gICAgICovXHJcbiAgICBnZXRZKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMueHlbaW5kZXggKiA0ICsgMV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1ha2UgYW4gZXF1YWxseSBzcGFjZWQgYXJyYXkgb2YgWCBwb2ludHNcclxuICAgICAqIEBwYXJhbSBzdGFydCAgLSB0aGUgc3RhcnQgb2YgdGhlIHNlcmllc1xyXG4gICAgICogQHBhcmFtIHN0ZXBTaXplIC0gc3RlcCBzaXplIGJldHdlZW4gZWFjaCBkYXRhIHBvaW50XHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIC8veCA9IFstMSwgLTAuOCwgLTAuNiwgLTAuNCwgLTAuMiwgMCwgMC4yLCAwLjQsIDAuNiwgMC44XVxyXG4gICAgICogY29uc3QgbnVtWCA9IDEwO1xyXG4gICAgICogbGluZS5saW5lU3BhY2VYKC0xLCAyIC8gbnVtWCk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgbGluZVNwYWNlWChzdGFydCwgc3RlcHNpemUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtUG9pbnRzOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gc2V0IHggdG8gLW51bS8yOjE6K251bS8yXHJcbiAgICAgICAgICAgIHRoaXMueHlbaSAqIDRdID0gc3RhcnQgKyBpICogc3RlcHNpemU7XHJcbiAgICAgICAgICAgIHRoaXMueHlbaSAqIDQgKyAyXSA9IHN0YXJ0ICsgKGkgKiBzdGVwc2l6ZSArIHN0ZXBzaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIGNvbnN0YW50IHZhbHVlIGZvciBhbGwgWSB2YWx1ZXMgaW4gdGhlIGxpbmVcclxuICAgICAqIEBwYXJhbSBjIC0gY29uc3RhbnQgdmFsdWVcclxuICAgICAqL1xyXG4gICAgY29uc3RZKGMpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtUG9pbnRzOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gc2V0IHggdG8gLW51bS8yOjE6K251bS8yXHJcbiAgICAgICAgICAgIHRoaXMuc2V0WShpLCBjKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIG5ldyBZIHZhbHVlcyB0byB0aGUgZW5kIG9mIGN1cnJlbnQgYXJyYXkgYW5kIHNoaWZ0IGl0LCBzbyB0aGF0IHRoZSB0b3RhbCBudW1iZXIgb2YgdGhlIHBhaXIgcmVtYWlucyB0aGUgc2FtZVxyXG4gICAgICogQHBhcmFtIGRhdGEgLSB0aGUgWSBhcnJheVxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiB5QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFszLCA0LCA1XSk7XHJcbiAgICAgKiBsaW5lLnNoaWZ0QWRkKHlBcnJheSk7XHJcbiAgICAgKiBgYGBcclxuICAgICAqL1xyXG4gICAgc2hpZnRBZGQoZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHNoaWZ0U2l6ZSA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1Qb2ludHMgLSBzaGlmdFNpemU7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFkoaSwgdGhpcy5nZXRZKGkgKyBzaGlmdFNpemUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlmdFNpemU7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFkoaSArIHRoaXMubnVtUG9pbnRzIC0gc2hpZnRTaXplLCBkYXRhW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgV2ViZ2xQb2xhciBleHRlbmRzIFdlYmdsQmFzZUxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoYywgbnVtUG9pbnRzKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLndlYmdsTnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG4gICAgICAgIHRoaXMubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBjO1xyXG4gICAgICAgIHRoaXMuaW50ZW5pc3R5ID0gMTtcclxuICAgICAgICB0aGlzLnh5ID0gbmV3IEZsb2F0MzJBcnJheSgyICogdGhpcy53ZWJnbE51bVBvaW50cyk7XHJcbiAgICAgICAgdGhpcy5fdmJ1ZmZlciA9IDA7XHJcbiAgICAgICAgdGhpcy5fcHJvZyA9IDA7XHJcbiAgICAgICAgdGhpcy5fY29vcmQgPSAwO1xyXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRUaGV0YSA9IDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpbmRleDogaW5kZXggb2YgdGhlIGxpbmVcclxuICAgICAqIEBwYXJhbSB0aGV0YSA6IGFuZ2xlIGluIGRlZ1xyXG4gICAgICogQHBhcmFtIHIgOiByYWRpdXNcclxuICAgICAqL1xyXG4gICAgc2V0UnRoZXRhKGluZGV4LCB0aGV0YSwgcikge1xyXG4gICAgICAgIC8vY29uc3QgckEgPSBNYXRoLmFicyhyKTtcclxuICAgICAgICAvL2NvbnN0IHRoZXRhQSA9IHRoZXRhICUgMzYwO1xyXG4gICAgICAgIGNvbnN0IHggPSByICogTWF0aC5jb3MoKDIgKiBNYXRoLlBJICogKHRoZXRhICsgdGhpcy5vZmZzZXRUaGV0YSkpIC8gMzYwKTtcclxuICAgICAgICBjb25zdCB5ID0gciAqIE1hdGguc2luKCgyICogTWF0aC5QSSAqICh0aGV0YSArIHRoaXMub2Zmc2V0VGhldGEpKSAvIDM2MCk7XHJcbiAgICAgICAgLy9jb25zdCBpbmRleCA9IE1hdGgucm91bmQoICgodGhldGEgJSAzNjApLzM2MCkgKiB0aGlzLm51bVBvaW50cyApO1xyXG4gICAgICAgIHRoaXMuc2V0WChpbmRleCwgeCk7XHJcbiAgICAgICAgdGhpcy5zZXRZKGluZGV4LCB5KTtcclxuICAgIH1cclxuICAgIGdldFRoZXRhKGluZGV4KSB7XHJcbiAgICAgICAgLy9yZXR1cm4gTWF0aC50YW5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGdldFIoaW5kZXgpIHtcclxuICAgICAgICAvL3JldHVybiBNYXRoLnRhblxyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5nZXRYKGluZGV4KSwgMikgKyBNYXRoLnBvdyh0aGlzLmdldFkoaW5kZXgpLCAyKSk7XHJcbiAgICB9XHJcbiAgICBzZXRYKGluZGV4LCB4KSB7XHJcbiAgICAgICAgdGhpcy54eVtpbmRleCAqIDJdID0geDtcclxuICAgIH1cclxuICAgIHNldFkoaW5kZXgsIHkpIHtcclxuICAgICAgICB0aGlzLnh5W2luZGV4ICogMiArIDFdID0geTtcclxuICAgIH1cclxuICAgIGdldFgoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy54eVtpbmRleCAqIDJdO1xyXG4gICAgfVxyXG4gICAgZ2V0WShpbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnh5W2luZGV4ICogMiArIDFdO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBBdXRob3IgRGFuaWFsIENoaXRuaXMgMjAxOVxyXG4gKlxyXG4gKiBpbnNwaXJlZCBieTpcclxuICogaHR0cHM6Ly9jb2RlcGVuLmlvL0F6YXplbE4yOFxyXG4gKiBodHRwczovL3d3dy50dXRvcmlhbHNwb2ludC5jb20vd2ViZ2wvd2ViZ2xfbW9kZXNfb2ZfZHJhd2luZy5odG1cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBjbGFzcyBmb3IgdGhlIHdlYmdsLXBsb3QgbGlicmFyeVxyXG4gKi9cclxuY2xhc3MgV2ViR0xQbG90IHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgd2ViZ2wtcGxvdCBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGNhbnZhcyAtIHRoZSBjYW52YXMgaW4gd2hpY2ggdGhlIHBsb3QgYXBwZWFyc1xyXG4gICAgICogQHBhcmFtIGRlYnVnIC0gKE9wdGlvbmFsKSBsb2cgZGVidWcgbWVzc2FnZXMgdG8gY29uc29sZVxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogRm9yIEhUTUxDYW52YXNcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNvbnN0IGNhbnZhcyA9IGRjb3VtZW50LmdldEVlbGVtZW50YnlJZChcImNhbnZhc1wiKTtcclxuICAgICAqXHJcbiAgICAgKiBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgICAqIGNhbnZhcy53aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aCAqIGRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgKiBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodCAqIGRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgKlxyXG4gICAgICogY29uc3Qgd2ViZ2xwID0gbmV3IFdlYkdMcGxvdChjYW52YXMpO1xyXG4gICAgICogLi4uXHJcbiAgICAgKiBgYGBcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogRm9yIE9mZlNjcmVlbkNhbnZhc1xyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogY29uc3Qgb2Zmc2NyZWVuID0gaHRtbENhbnZhcy50cmFuc2ZlckNvbnRyb2xUb09mZnNjcmVlbigpO1xyXG4gICAgICpcclxuICAgICAqIG9mZnNjcmVlbi53aWR0aCA9IGh0bWxDYW52YXMuY2xpZW50V2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAqIG9mZnNjcmVlbi5oZWlnaHQgPSBodG1sQ2FudmFzLmNsaWVudEhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG4gICAgICpcclxuICAgICAqIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIoXCJvZmZTY3JlZW5DYW52YXMuanNcIiwgeyB0eXBlOiBcIm1vZHVsZVwiIH0pO1xyXG4gICAgICogd29ya2VyLnBvc3RNZXNzYWdlKHsgY2FudmFzOiBvZmZzY3JlZW4gfSwgW29mZnNjcmVlbl0pO1xyXG4gICAgICogYGBgXHJcbiAgICAgKiBUaGVuIGluIG9mZlNjcmVlbkNhbnZhcy5qc1xyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogb25tZXNzYWdlID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICogY29uc3Qgd2dscCA9IG5ldyBXZWJHTHBsb3QoZXZ0LmRhdGEuY2FudmFzKTtcclxuICAgICAqIC4uLlxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgZGVidWcpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBsb2cgZGVidWcgb3V0cHV0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGVidWcgPSBkZWJ1ZyA9PSB1bmRlZmluZWQgPyBmYWxzZSA6IGRlYnVnO1xyXG4gICAgICAgIHRoaXMubG9nKFwiY2FudmFzIHR5cGUgaXM6IFwiICsgY2FudmFzLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgIHRoaXMubG9nKGBbd2ViZ2wtcGxvdF06d2lkdGg9JHtjYW52YXMud2lkdGh9LCBoZWlnaHQ9JHtjYW52YXMuaGVpZ2h0fWApO1xyXG4gICAgICAgIGNvbnN0IHdlYmdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiLCB7XHJcbiAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZSxcclxuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubGluZXMgPSBbXTtcclxuICAgICAgICB0aGlzLndlYmdsID0gd2ViZ2w7XHJcbiAgICAgICAgdGhpcy5nU2NhbGVYID0gMTtcclxuICAgICAgICB0aGlzLmdTY2FsZVkgPSAxO1xyXG4gICAgICAgIHRoaXMuZ1hZcmF0aW8gPSAxO1xyXG4gICAgICAgIHRoaXMuZ09mZnNldFggPSAwO1xyXG4gICAgICAgIHRoaXMuZ09mZnNldFkgPSAwO1xyXG4gICAgICAgIC8vIEVuYWJsZSB0aGUgZGVwdGggdGVzdFxyXG4gICAgICAgIHdlYmdsLmVuYWJsZSh3ZWJnbC5ERVBUSF9URVNUKTtcclxuICAgICAgICAvLyBDbGVhciB0aGUgY29sb3IgYW5kIGRlcHRoIGJ1ZmZlclxyXG4gICAgICAgIHdlYmdsLmNsZWFyKHdlYmdsLkNPTE9SX0JVRkZFUl9CSVQgfHwgd2ViZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgICAgICAgLy8gU2V0IHRoZSB2aWV3IHBvcnRcclxuICAgICAgICB3ZWJnbC52aWV3cG9ydCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiB1cGRhdGVzIGFuZCByZWRyYXdzIHRoZSBjb250ZW50IG9mIHRoZSBwbG90XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBjb25zdCB3ZWJnbCA9IHRoaXMud2ViZ2w7XHJcbiAgICAgICAgdGhpcy5saW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChsaW5lLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHdlYmdsLnVzZVByb2dyYW0obGluZS5fcHJvZyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1c2NhbGUgPSB3ZWJnbC5nZXRVbmlmb3JtTG9jYXRpb24obGluZS5fcHJvZywgXCJ1c2NhbGVcIik7XHJcbiAgICAgICAgICAgICAgICB3ZWJnbC51bmlmb3JtTWF0cml4MmZ2KHVzY2FsZSwgZmFsc2UsIG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUuc2NhbGVYICogdGhpcy5nU2NhbGVYLFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lLnNjYWxlWSAqIHRoaXMuZ1NjYWxlWSAqIHRoaXMuZ1hZcmF0aW8sXHJcbiAgICAgICAgICAgICAgICBdKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1b2Zmc2V0ID0gd2ViZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKGxpbmUuX3Byb2csIFwidW9mZnNldFwiKTtcclxuICAgICAgICAgICAgICAgIHdlYmdsLnVuaWZvcm0yZnYodW9mZnNldCwgbmV3IEZsb2F0MzJBcnJheShbbGluZS5vZmZzZXRYICsgdGhpcy5nT2Zmc2V0WCwgbGluZS5vZmZzZXRZICsgdGhpcy5nT2Zmc2V0WV0pKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVDb2xvciA9IHdlYmdsLmdldFVuaWZvcm1Mb2NhdGlvbihsaW5lLl9wcm9nLCBcInVDb2xvclwiKTtcclxuICAgICAgICAgICAgICAgIHdlYmdsLnVuaWZvcm00ZnYodUNvbG9yLCBbbGluZS5jb2xvci5yLCBsaW5lLmNvbG9yLmcsIGxpbmUuY29sb3IuYiwgbGluZS5jb2xvci5hXSk7XHJcbiAgICAgICAgICAgICAgICB3ZWJnbC5idWZmZXJEYXRhKHdlYmdsLkFSUkFZX0JVRkZFUiwgbGluZS54eSwgd2ViZ2wuU1RSRUFNX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgd2ViZ2wuZHJhd0FycmF5cyhsaW5lLmxvb3AgPyB3ZWJnbC5MSU5FX0xPT1AgOiB3ZWJnbC5MSU5FX1NUUklQLCAwLCBsaW5lLndlYmdsTnVtUG9pbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgLy8gQ2xlYXIgdGhlIGNhbnZhcyAgLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz9cclxuICAgICAgICAvL3RoaXMud2ViZ2wuY2xlYXJDb2xvcigwLjEsIDAuMSwgMC4xLCAxLjApO1xyXG4gICAgICAgIHRoaXMud2ViZ2wuY2xlYXIodGhpcy53ZWJnbC5DT0xPUl9CVUZGRVJfQklUIHx8IHRoaXMud2ViZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZHMgYSBsaW5lIHRvIHRoZSBwbG90XHJcbiAgICAgKiBAcGFyYW0gbGluZSAtIHRoaXMgY291bGQgYmUgYW55IG9mIGxpbmUsIGxpbmVzdGVwLCBoaXN0b2dyYW0sIG9yIHBvbGFyXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGNvbnN0IGxpbmUgPSBuZXcgbGluZShjb2xvciwgbnVtUG9pbnRzKTtcclxuICAgICAqIHdnbHAuYWRkTGluZShsaW5lKTtcclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBhZGRMaW5lKGxpbmUpIHtcclxuICAgICAgICBsaW5lLl92YnVmZmVyID0gdGhpcy53ZWJnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICB0aGlzLndlYmdsLmJpbmRCdWZmZXIodGhpcy53ZWJnbC5BUlJBWV9CVUZGRVIsIGxpbmUuX3ZidWZmZXIpO1xyXG4gICAgICAgIHRoaXMud2ViZ2wuYnVmZmVyRGF0YSh0aGlzLndlYmdsLkFSUkFZX0JVRkZFUiwgbGluZS54eSwgdGhpcy53ZWJnbC5TVFJFQU1fRFJBVyk7XHJcbiAgICAgICAgY29uc3QgdmVydENvZGUgPSBgXHJcbiAgICAgIGF0dHJpYnV0ZSB2ZWMyIGNvb3JkaW5hdGVzO1xyXG4gICAgICB1bmlmb3JtIG1hdDIgdXNjYWxlO1xyXG4gICAgICB1bmlmb3JtIHZlYzIgdW9mZnNldDtcclxuXHJcbiAgICAgIHZvaWQgbWFpbih2b2lkKSB7XHJcbiAgICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNCh1c2NhbGUqY29vcmRpbmF0ZXMgKyB1b2Zmc2V0LCAwLjAsIDEuMCk7XHJcbiAgICAgIH1gO1xyXG4gICAgICAgIC8vIENyZWF0ZSBhIHZlcnRleCBzaGFkZXIgb2JqZWN0XHJcbiAgICAgICAgY29uc3QgdmVydFNoYWRlciA9IHRoaXMud2ViZ2wuY3JlYXRlU2hhZGVyKHRoaXMud2ViZ2wuVkVSVEVYX1NIQURFUik7XHJcbiAgICAgICAgLy8gQXR0YWNoIHZlcnRleCBzaGFkZXIgc291cmNlIGNvZGVcclxuICAgICAgICB0aGlzLndlYmdsLnNoYWRlclNvdXJjZSh2ZXJ0U2hhZGVyLCB2ZXJ0Q29kZSk7XHJcbiAgICAgICAgLy8gQ29tcGlsZSB0aGUgdmVydGV4IHNoYWRlclxyXG4gICAgICAgIHRoaXMud2ViZ2wuY29tcGlsZVNoYWRlcih2ZXJ0U2hhZGVyKTtcclxuICAgICAgICAvLyBGcmFnbWVudCBzaGFkZXIgc291cmNlIGNvZGVcclxuICAgICAgICBjb25zdCBmcmFnQ29kZSA9IGBcclxuICAgICAgICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XHJcbiAgICAgICAgIHVuaWZvcm0gaGlnaHAgdmVjNCB1Q29sb3I7XHJcbiAgICAgICAgIHZvaWQgbWFpbih2b2lkKSB7XHJcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9ICB1Q29sb3I7XHJcbiAgICAgICAgIH1gO1xyXG4gICAgICAgIGNvbnN0IGZyYWdTaGFkZXIgPSB0aGlzLndlYmdsLmNyZWF0ZVNoYWRlcih0aGlzLndlYmdsLkZSQUdNRU5UX1NIQURFUik7XHJcbiAgICAgICAgdGhpcy53ZWJnbC5zaGFkZXJTb3VyY2UoZnJhZ1NoYWRlciwgZnJhZ0NvZGUpO1xyXG4gICAgICAgIHRoaXMud2ViZ2wuY29tcGlsZVNoYWRlcihmcmFnU2hhZGVyKTtcclxuICAgICAgICBsaW5lLl9wcm9nID0gdGhpcy53ZWJnbC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICAgICAgdGhpcy53ZWJnbC5hdHRhY2hTaGFkZXIobGluZS5fcHJvZywgdmVydFNoYWRlcik7XHJcbiAgICAgICAgdGhpcy53ZWJnbC5hdHRhY2hTaGFkZXIobGluZS5fcHJvZywgZnJhZ1NoYWRlcik7XHJcbiAgICAgICAgdGhpcy53ZWJnbC5saW5rUHJvZ3JhbShsaW5lLl9wcm9nKTtcclxuICAgICAgICB0aGlzLndlYmdsLmJpbmRCdWZmZXIodGhpcy53ZWJnbC5BUlJBWV9CVUZGRVIsIGxpbmUuX3ZidWZmZXIpO1xyXG4gICAgICAgIGxpbmUuX2Nvb3JkID0gdGhpcy53ZWJnbC5nZXRBdHRyaWJMb2NhdGlvbihsaW5lLl9wcm9nLCBcImNvb3JkaW5hdGVzXCIpO1xyXG4gICAgICAgIHRoaXMud2ViZ2wudmVydGV4QXR0cmliUG9pbnRlcihsaW5lLl9jb29yZCwgMiwgdGhpcy53ZWJnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMud2ViZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobGluZS5fY29vcmQpO1xyXG4gICAgICAgIHRoaXMubGluZXMucHVzaChsaW5lKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogcmVtb3ZlIHRoZSBsYXN0IGxpbmVcclxuICAgICAqL1xyXG4gICAgcG9wTGluZSgpIHtcclxuICAgICAgICB0aGlzLmxpbmVzLnBvcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2UgdGhlIFdiR0wgdmlld3BvcnRcclxuICAgICAqIEBwYXJhbSBhXHJcbiAgICAgKiBAcGFyYW0gYlxyXG4gICAgICogQHBhcmFtIGNcclxuICAgICAqIEBwYXJhbSBkXHJcbiAgICAgKi9cclxuICAgIHZpZXdwb3J0KGEsIGIsIGMsIGQpIHtcclxuICAgICAgICB0aGlzLndlYmdsLnZpZXdwb3J0KGEsIGIsIGMsIGQpO1xyXG4gICAgfVxyXG4gICAgbG9nKHN0cikge1xyXG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW3dlYmdsLXBsb3RdOlwiICsgc3RyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR0xQbG90O1xuZXhwb3J0IHsgQ29sb3JSR0JBLCBXZWJnbExpbmUsIFdlYmdsUG9sYXIsIFdlYmdsU3RlcCB9O1xuIiwiaW1wb3J0IFdlYkdMcGxvdCwgeyBXZWJnbExpbmUsIENvbG9yUkdCQSB9IGZyb20gXCJ3ZWJnbC1wbG90XCI7XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIChlKSA9PiB7XHJcbiAgY29uc3QgY2FudmFzID0gZS5kYXRhLmNhbnZhcztcclxuXHJcbiAgY29uc29sZS5sb2coY2FudmFzKTtcclxuXHJcbiAgY29uc3QgbnVtWCA9IGNhbnZhcy53aWR0aDtcclxuXHJcbiAgY29uc3QgY29sb3IgPSBuZXcgQ29sb3JSR0JBKE1hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCksIE1hdGgucmFuZG9tKCksIDEpO1xyXG5cclxuICBjb25zdCBsaW5lID0gbmV3IFdlYmdsTGluZShjb2xvciwgbnVtWCk7XHJcblxyXG4gIGNvbnN0IHdnbHAgPSBuZXcgV2ViR0xwbG90KGNhbnZhcywgdHJ1ZSk7XHJcblxyXG4gIGxpbmUubGluZVNwYWNlWCgtMSwgMiAvIG51bVgpO1xyXG4gIHdnbHAuYWRkTGluZShsaW5lKTtcclxuXHJcbiAgZnVuY3Rpb24gbmV3RnJhbWUoKSB7XHJcbiAgICB1cGRhdGUoKTtcclxuICAgIHdnbHAudXBkYXRlKCk7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmV3RnJhbWUpO1xyXG4gIH1cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmV3RnJhbWUpO1xyXG5cclxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XHJcbiAgICBjb25zdCBmcmVxID0gMC4wMDE7XHJcbiAgICBjb25zdCBhbXAgPSAwLjU7XHJcbiAgICBjb25zdCBub2lzZSA9IDAuMTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmUubnVtUG9pbnRzOyBpKyspIHtcclxuICAgICAgY29uc3QgeVNpbiA9IE1hdGguc2luKE1hdGguUEkgKiBpICogZnJlcSAqIE1hdGguUEkgKiAyKTtcclxuICAgICAgY29uc3QgeU5vaXNlID0gTWF0aC5yYW5kb20oKSAtIDAuNTtcclxuICAgICAgbGluZS5zZXRZKGksIHlTaW4gKiBhbXAgKyB5Tm9pc2UgKiBub2lzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIl0sIm5hbWVzIjpbIldlYkdMcGxvdCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxTQUFTLENBQUM7QUFDaEIsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQzVCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sYUFBYSxDQUFDO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLElBQUksV0FBVyxHQUFHO0FBQ2xCLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDeEIsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFH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QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksUUFBUSxDQUFDLElBQUksRUFBRTtBQUNuQixRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdEMsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0QsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ25ELFNBQVM7QUFDVCxRQUFRLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxTQUFTO0FBQ1QsS0FBSztBQUNMLENBQUM7QUE4SUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sU0FBUyxDQUFDO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDM0Is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', false);
    /* eslint-enable */

    const htmlCanvas = document.getElementById("my_canvas");
    const offscreen = htmlCanvas.transferControlToOffscreen();
    offscreen.width = htmlCanvas.clientWidth * window.devicePixelRatio;
    offscreen.height = htmlCanvas.clientHeight * window.devicePixelRatio;
    const worker = new WorkerFactory();
    worker.postMessage({ canvas: offscreen }, [offscreen]);
    document.getElementById("btBusy").addEventListener("click", () => {
        const info = document.getElementById("info");
        info.innerHTML =
            "Main thread working...<br>Check the console (F12)<br> Try resizing the window now";
        const total = 100000000;
        for (let i = 0; i < total; i++) {
            if (i % (total / 20) == 0) {
                console.log(((100 * i) / total).toFixed(0) + "%");
            }
        }
        info.innerHTML = "Done!";
    });

}());
